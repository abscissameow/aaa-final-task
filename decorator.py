from functools import wraps
from random import randint


def min_count(p: int) -> str:
    """
    –º–∏–Ω—É—Ç–∫–∏
    """
    if p % 10 == 1 and p % 100 != 11:
        return '–º–∏–Ω—É—Ç–∫–∞'
    elif p % 10 in [2, 3, 4] and p % 100 not in [12, 13, 14]:
        return '–º–∏–Ω—É—Ç–∫–∏'
    else:
        return '–º–∏–Ω—É—Ç–æ–∫'


def log(message_template: str):
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    """
    def decorator(func):
        """
        –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        """

        @wraps(func)
        def wrapper(*args, **kwargs):
            """
            –æ–±—ë—Ä—Ç–æ—á–∫–∞
            """
            p = randint(10, 30)
            print(f' {message_template} {p} {min_count(p)} üïê')
        return wrapper

    return decorator
